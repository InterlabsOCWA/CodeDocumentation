---
title: "Workshop for Version Control"
author: "YJ, JH"
#format: pptx
format:
  revealjs:
    smaller: true
    
---

### Workshop Outline
::: {style="font-size: 24px"}
:::: {.columns}

::: {.column width="50%"}
**1. Workshop Prep** (9.30-10.30 am)

- Installation (done before workshop)
- What and why version control
- Connection and clone

**2. Version control project workflow** (10.45-11.45am)

- Home folder location
- Repository file
:::

::: {.column width="4=50%"}
**3. General each branch workflow** (1-3pm)

- main
- round - tell story
- develop - tell story, code review step (may skip)
- feature related to issue

**4. Fundamentals branch workflow** (3.30-4.30pm) (may skip)
 
- switch branch
- pull from remote (include merge conflict)
- make change and commit
- push
 
:::

::::

:::

# Workshop Prep

## Installation and setup

::: {style="font-size: 30px"}
Finished 3.1 installation section steps 1-4 in [Code Documentation](https://interlabsocwa.github.io/CodeDocumentation/) before workshop
:::

```{r}
#Comments for Yuhan 
# need a brief paragraph on rollback - how to use old commit hash to bring back an older version if a new commit has severe issues
```
## What and why version control

::: {style="font-size: 30px"}
Version control systems are software tools that help teams manage changes to source code over time.^[https://www.atlassian.com/git/tutorials/what-is-version-control]

- Improve work efficiency
- Traceability. Easily turn back and compare previous version
- Collaborate at same time
:::
## Connect Rstudio to GitHub and clone the repo to local

At the beginning, we need to use git clone to copy the remote repository we created (e.x. base_code) to our local computer, so we can work locally. 

::: {.callout-important}
Note: Git clone from Rstudio not command line, so it will generate the .Rproj automatically.
::: 

![connect](src/RStudioConnectGitHub.gif)
  
After click **“Create Project”** to create a new directory with same remote repository name on your computer, which will be all of these things:
  
- a .gitignore file
- a .Rhistory file
- an RStudio Project
- any files already uploaded into the remote repository

## Detect Git from RStudio

* Type `where git` in cmd to get the git executable path
* From RStudio, go to *Tools > Global Options > Git/SVN* and make sure that the box *Git executable* points to your Git executable.
![detect](src/detect.png)


```{r}
#Comments for Yuhan 

# I moved the home folder description up right beneath the diagram.  We need a description of the normal working "place" (the git clone local - you mentioned in the general set up for setting up a new repository but can you add description of how it would be like for our project base code?  especially with branches - does the user need to git clone each branch into a separate folder, or can they switch after git cloning the main?  this needs to be very clear assuming the reader is a new student , for example).  How often are we to sync/commit to github from local?  Then, back to the network folder home locations - how often are these to be "synced" with the github versions?  Decide on a frequency and that will become part of the QMS requirement for data management.

```
# Version control project workflow {#vc-project-workflow}

## The overall workflow graph of version control

The diagram below shows the overall version control workflow for each round.

![workflow](src/workflow.png)

## Folder Location
**GitHub location: **

Website: https://github.com/InterlabsOCWA/base_code

**Local location:**

Anywhere you like!

**Archive folder location: **

* main: /3_Templates_References/Round_codes
* round: /4_WIP/O103-Interlabs/d_Code 
* develop: /1_QMS

![flow](src/flow.png)
## Commit
Commit is like a save point to save your current work locally.

commit hash - for future roll back
e.g. commit a4517d


## gitignore file {#gitignore}

The .gitignore file can tell Git which files and directories to ignore when you make a commit. We can commit and push the .gitinore file to share the ignore rules.

The .gitigonre content writing reference: <https://swcarpentry.github.io/git-novice/06-ignore.html>
   
The data/files we don't want to commit to GitHub:

- Rproj (keep it locally)
- all the data spreadsheet - Not sure, might be different 

![datafolder](src/datafolder.png)

# General each branch workflow
## Main branch
The main branch contains the base code template that will be updated at the end each round, so we need to upload/push the initial files at beginning. 

* After all files settle done, we should not touch this branch. 
* At the end of the round, a workshop will be hold to compare the files in different branches using **Notepad++/ Pull Request** and decide the merge request before merging the subbranch to main.

![main](src/main.png)

::: {.callout-warning}
People should not switch to main branch and make changes to it during work.
:::  

## Round branch
The round branch contains current round code. For each round, we will create a round branch from main. At the end of this round, create pull request to merge to main branch (Only need to create pull request. Do not need to merge it!).


![round](src/round.png)

### The workflow in round branch:

:::: {.columns}
::: {.column width="50%"}

1. Make sure you are in round branch 
2. Copy all the code need data folders into your working directory
3. Pull the current files in remote repository to local
4. Edit the code and commit (save) your changes to local repo
5. Push your commit to remote repo
:::

::: {.column width="4=50%"}
Might need to create **feature** branch based on the issues:

1. Create new feature branch from the issue
2. Do the same steps 1-5 above
3. After complete the feature branch, create Pull request to merge back to the round branch
:::

::::


## Develop branch
The code refactoring work will in this branch. At the end of this round, create pull request to merge to main branch (Only need to create pull request. Do not need to merge it!).

### The workflow for develop branch: 

1. Make sure you are in develop branch
2. Copy the data folder into your working directory
3. Do the [branch workflow](#branch_workflow) steps.

Might need to create **feature** branch based on the issues:

1. Create new feature branch from the issue
2. Do the [branch workflow](#branch_workflow) steps.
3. After complete the feature branch, create Pull request to merge back to the develop branch
4. May have [code review](https://www.freecodecamp.org/news/how-to-use-git-and-github-in-a-team-like-a-pro/) after the pull request


# Fundamentals branch workflow {#branch_workflow}

## Overall flow chart

The image below shows a overall git flow chart.
![flow](src/flow.png)

## Repository
We will need a repository to store all the files.

- The local repository is a Git repository that is stored on our computer 
- The remote repository is stored on some remote computer. 

At the beginning of the project, we need to create a remote repository in GitHub. 

For the most part, we will be working in the base_code repository at <https://github.com/InterlabsOCWA/base_code>


## Create branches

To work on different versions/add new feature to the code, we need to branch off the specific branch we want to work on. It will copy all the files in the branch at that point in time.

::: {.callout-important}
Remember to select which branch you want to branch off **AND** Pull it to your local after you create branch !!
:::
    
There are two ways to create a new branch in both local and remote:

:::: {.columns}

::: {.column width="50%"}
- From GitHub:
![gitbranch](src/GitHubBranch.gif)
:::

::: {.column width="4=50%"}
- From Rstudio:

Switch to the branch you want to branch off ([see switch branch section](#branch_workflow) in branch workflow) then create branch followed by below image.
      
![Rbranch](src/RBranch.png)
:::

::::
   

## 1. Switch to corresponding branch

Since different people can be working on different branches, before starting our work, we need to switch to our [working branch](#vc-project-workflow). There are two methods to switch between branch:

* In Rstudio:

    Select the remote branch you want to work on by clicking the bottom (see image below), it will automatically create and switch to that local branch.
  
    ![Rbranch](src/SwitchBranch.png)
     
* In Shell: type `$ git checkout <branch_name>` in terminal

## 2. Pull from remote

To start working on a project, pull any new changes to update local copy. If there is a merge conflict see [merge_conflict section](#merge_conflict).

* In Rstudio: Click the **Pull** bottom in the **Git** tab section

* In Shell: type `$ git pull` in terminal

## 3. Make changes and commit

* After finishing changes, click on the **Git** tab in RStudio. It will show the files that have changed or added.

![git](src/git.png)
---
* Click on the **Commit**, it will show the window in below image. Click the staged box to stage the file you want to push to remote. You can see the difference between the files after you click the file (show blue line). Lines that have been added are green. Lines that have been removed are red.

![diff](src/diff.png)

* Add a commit message and click on **Commit** in this window. Every time make a commit, must also write a short **commit message**.
    
* You can view the history of your commit after click the left corner **History** beside the change. You can also view the commit history in other Git client app. Or check your past commits though type `git log` in terminal.

::: {.callout-note}
For the files you don't want to push to Github you can list the them in [**.gitignore** file](#gitignore).
:::

## Git state 

* Check on the state of the Git world: type `git status` in terminal



## 4. Push

When you are finished and committed, remember to **Push** these changes to the remote repository (e.g., GitHub). Should see 'HEAD -> branch' if successfully pushed. 

::: {.callout-note}
You might need to pull again before push, if someone pushed their work to remote during your work.
::: 
   
## Pull Request and Merge Changes between branches - Edit Later {#pullrequest}

Each time you want to merge/pull a branch from another branch, you will need to create a pull request. Sometimes it will show up automatically in the branch web page after you push, if not you need to do it manually.

* For the first auto case, you will see a notice to create a pull request (see the image below). Then click on the button that says **Compare and pull request** to go next step. 

* For the manual case, first need to click the **Pull request** tab. Then click the button that says **New pull request**. It will show up the **Compare changes** page, you need to decide the pull direction. The compare branch is the one you want to pull from. Base is the branch will be changed. After decide the branches, click **Create pull request** button and go next step.

* Now both case are in the same **Open a pull request** page, and click on **Create pull request** to compare and merge them.

           
* GitHub has now compared the two versions of the project that are in the two branches. If there is no conflict it is telling us that there are no conflicts between the two versions and you can click the green **Merge pull request** button to merge the changes.

* If you don't need the branch (e.x. feature branch), click **Confirm merge**. Go ahead and delete the branch, since its changes have been incorporated, with the **Delete branch** button in the purple box.
![success](src/successMerge.png)

The manual pull request process: ![manual](src/manualpullrequest.gif)

## Merge conflict {#merge_conflict}
There will be a merge conflict when you pull from the remote but have done some new work locally since the last time you pulled:

* Recent commit history of origin/main: A--B--C
    
* Recent commit history of the local main branch: A--B--D

It will show the warning below and automatically add the two version with markers in that file.
    
    'CONFLICT (content): Merge conflict in ...(the file have conflict)
    Automatic merge failed; fix conflicts and then commit the result.'      
      
* The code between the <<<<<<< HEAD and ======= line is the content you committed in your local and the code between the ======= and >>>>>>> line is the content in the current remote branch.

![marker](src/mergeconflict.png)

* Keep the version you want and remove the all the markers line (<<<<<<< HEAD:, ======, >>>>>>) inserted to demarcate the conflicts then save the file and do the following commit and push again.


# Issues Tracking
For most cases, the project issues tab in GitHub should be used to log issues (including bugs and features suggestions) and assign staff to resolve, using this [workflow](https://docs.github.com/en/issues/tracking-your-work-with-issues/quickstart) within repositories set up as projects.  

Issues are repository wide (i.e. cannot be "created" specific to a branch). To aid tracking, the title of the issue should state the specific branch it is for. Additionally, it is encouraged to add labels to help identify type of issue and the branch it is for.  A partial exception is features request which, after being created as an issue in the appropriate parent branch, should be made its own branch to differentiate it even more.  

![Issues creation and syntax](img/githubIssuesCreate.png)

## 1. [Creating an issue](https://github.com/InterlabsOCWA/base_code/issues)  
The required syntax for issues title is as follows:  
Title: *Branch*-*Type*_*Descriptor*  
Where Branch = *branch name* e.g. should primarily develop unless you are reporting a bug on the round branch
Where Type = feature OR bug OR refactor, for example
Where Descriptor = short human-readable descriptor of request

## 2. Adding details 
(click on the gear icons on the right panel of the github issue page to add the following)

* *Label* appropriately by branch and any other help tags at the right panel
* Assign *Project* (usually the "@InterlabsOCWA's BaseCode") at the right panel
* Assign *Assignee* as the lead staff responsible
* Provide sufficient context in the *comment* box in case other staff need to follow up on the issue
* if this is a new feature, once the issue is submitted and there is to resource to tackle the feature addition, the user should (reload the issue page) create a new branch for it under the development section, right panel.  The branch should be a branch off from the develop branch, as illustrated below.     
![Issues creation and syntax](img/githubIssuesBranch.gif)

## 3. Update

Update as appropriate, with commit hash if it is tied to a specific upload version.  By placing a commit hash, github will automatically provide a link to that committed version.  

## 4. Resolve and close.  
* Bugs: When resolved, staff should closed issue with sufficiently detailed comment for potential future reference, and include the git commit hash of the version pre/post-fix if appropriate.  Bugs should be resolved at the develop or round branches; for merges into the main branch, consult the team or wait until the milestone merges.
* Features request & refactoring tasks: these changes are to be reviewed by staff other than the coder to validate functionality & impacts.  Reviewer should close the issue once that is confirmed.  The git commit hash should be logged in the closure comment. 

# Unsolved questions
- Zombie code: cut off but might come back?

# References

*Version Control* (add existing RStudio project to Github): https://happygitwithr.com/index.html

https://hansenjohnson.org/post/sync-github-repository-with-existing-r-project/

https://aberdeenstudygroup.github.io/studyGroup/lessons/SG-T1-GitHubVersionControl/VersionControl/


 

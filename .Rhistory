#library(kableExtra)#for dataframe generated tables
library(networkD3) #for flowcharts
library(reticulate)#to run python in this file
### I. Code Documentation
#1.  Inventory existing external file dependencies and working procedures outside of main codebase, e.g. the python snippets, address books, flow of sample notes, raw, and clean data *(4 weeks / July 2023)*\
#Yuhan - please load into your excel table as df, then use kable package to format it
#*Deliverable: Inventory & flowchart of external relationships*
#2.  Inventory existing internal code dependencies and timelines (in-progress work shown in Figure 1)
# **Deliverable: Inventory & flowchart of intra-basecode relationships**
#| fig-cap: Intra code relationships
#| label: fig-workflow
nodes = data.frame("name" =
c("Emails",                                # 0
"Raw data",                              # 1
"QAQC check app (local/shinyapps)",      # 2
"Clean data xlsx set",                   # 3
"yyyymmdd_Sample_Notes.xlsm",            # 4
"config dt_methods.xlsx",                # 5
"WBE_SampleCode.rmd (github)",               # 6
"ggplot& gt .rds objects",               # 7
"svg, png plots, csv tables ",           # 8
"testReport_typst.qmd (github)",             # 9
"html report",                           # 10
"pdf report"))                           # 11
links = as.data.frame(matrix(c(
0, 1, 1, # Each row represents a link. The first number
1, 2, 1, # represents the node being conntected from.
2, 3, 1, # the second number represents the node connected to.
3, 6, 1, # The third number is the value of the node
4, 6, 0.5,
5, 6, 0.5,
6, 7 ,0.25,
6, 8, 0.33,
6, 9, 0.625,
7, 9, 0.625,
9, 10, 0.31,
9, 11, 0.31),
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 10)
#| echo: fenced
version
# not as necessary, but the IDE version can be checked using RStudio.Version()
#Yuhan's section
#### II. Training/Establishing Guidelines
#1.  Acquire training on and establish version control on Github *(2 weeks/July 2023)* *Deliverable: Training/Guidance document section, specifically method for & train team as soon as possible on version control/change management**\
### III. Preparatory Version Control & Unit Tests
#1.  Establish version control on Github. All team members to abide by training guidelines when introducing changes to main code base *(2 weeks/July 2023)*\
#    **Deliverable: Version control workflow graphic (to incl. in Training/Guidance document)**\
#Comments for Yuhan
# I would suggest that we don't need to give information on setting up new repository or branches in this doc (besides a general reference link) because we don't want people starting random repository/branches different from what you set up.
# instead can you walk through git clone process which Alex & Chris will need to use?
# if they git clone do they need to set up connection in RStudio (or command line)?  if not then the current connection step can be moved away alongside making new repositories and branches
# need a brief paragraph on rollback - how to use old commit hash to bring back an older version if a new commit has severe issues
#Comments for Yuhan
#- need the graphic cleaned up so it makes sense to a regular reader like Alex - e.g. what does it mean CA will mainly work here?  next round could be you or I, need the description for the task not a person
# what is JIRA-35 example feature?  can you change this example to match something we might see in interlabs.  also use our naming convention which applies to branches as well (so the double dash and space are not acceptable)
# bottom comment - "feel free [...]" can you add the note about how the feature or develop branch gets merged?  It's a note to yourself (I think) so don't leave it for the reader)
#TBD
# explain bare min. information you need with commit message like you started with the annotation under the round dots.  Initial name is probably the least important info in the commit since git would track who pushed the change anyways?  not sure
# explain how each dot is a commit like a save point we can revert to by knowing the commit hash e.g. commit ba9da59
# I moved the home folder description up right beneath the diagram.  We need a description of the normal working "place" (the git clone local - you mentioned in the general set up for setting up a new repository but can you add description of how it would be like for our project base code?  especially with branches - does the user need to git clone each branch into a separate folder, or can they switch after git cloning the main?  this needs to be very clear assuming the reader is a new student , for example).  How often are we to sync/commit to github from local?  Then, back to the network folder home locations - how often are these to be "synced" with the github versions?  Decide on a frequency and that will become part of the QMS requirement for data management.
nodes = data.frame("name" =
c("Sample Notes (xlsx)", # Node 0
"Base Code config chunk reportType", # Node 1
"Base Code Chunk 2d (~line 400)", # Node 2
"Base Code df's = PT + both", # Node 3
"Base Code df's = Interlab + both", # Node 4
"skeleton.rmd pt report", #Node 5
"skeleton.rmd interlab report")) #Node 6
links = as.data.frame(matrix(c(
0, 2, 10, # Each row represents a link. The first number
1, 2, 10, # represents the node being conntected from.
2, 3, 10, # the second number represents the node connected to.
2, 4, 10,
3, 5, 10,
4, 6, 10),# The third number is the value of the node
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 12, nodeWidth = 30)
#| echo: fenced
print(head
(tibble::tibble(
Package = names(installed.packages()[,3]),
Version = unname(installed.packages()[,3])
), n=600 #where n = an appropriately large value to capture all your packages
)
)
#library(kableExtra)#for dataframe generated tables
library(networkD3) #for flowcharts
library(reticulate)#to run python in this file
### I. Code Documentation
#1.  Inventory existing external file dependencies and working procedures outside of main codebase, e.g. the python snippets, address books, flow of sample notes, raw, and clean data *(4 weeks / July 2023)*\
#Yuhan - please load into your excel table as df, then use kable package to format it
#*Deliverable: Inventory & flowchart of external relationships*
#2.  Inventory existing internal code dependencies and timelines (in-progress work shown in Figure 1)
# **Deliverable: Inventory & flowchart of intra-basecode relationships**
#| fig-cap: Intra code relationships
#| label: fig-workflow
nodes = data.frame("name" =
c("Emails",                                # 0
"Raw data",                              # 1
"QAQC check app (local/shinyapps)",      # 2
"Clean data xlsx set",                   # 3
"yyyymmdd_Sample_Notes.xlsm",            # 4
"config dt_methods.xlsx",                # 5
"WBE_SampleCode.rmd (github)",               # 6
"ggplot& gt .rds objects",               # 7
"svg, png plots, csv tables ",           # 8
"testReport_typst.qmd (github)",             # 9
"html report",                           # 10
"pdf report"))                           # 11
links = as.data.frame(matrix(c(
0, 1, 1, # Each row represents a link. The first number
1, 2, 1, # represents the node being conntected from.
2, 3, 1, # the second number represents the node connected to.
3, 6, 1, # The third number is the value of the node
4, 6, 0.5,
5, 6, 0.5,
6, 7 ,0.25,
6, 8, 0.33,
6, 9, 0.625,
7, 9, 0.625,
9, 10, 0.31,
9, 11, 0.31),
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 10)
#| echo: fenced
version
# not as necessary, but the IDE version can be checked using RStudio.Version()
#Yuhan's section
#### II. Training/Establishing Guidelines
#1.  Acquire training on and establish version control on Github *(2 weeks/July 2023)* *Deliverable: Training/Guidance document section, specifically method for & train team as soon as possible on version control/change management**\
### III. Preparatory Version Control & Unit Tests
#1.  Establish version control on Github. All team members to abide by training guidelines when introducing changes to main code base *(2 weeks/July 2023)*\
#    **Deliverable: Version control workflow graphic (to incl. in Training/Guidance document)**\
#Comments for Yuhan
# I would suggest that we don't need to give information on setting up new repository or branches in this doc (besides a general reference link) because we don't want people starting random repository/branches different from what you set up.
# instead can you walk through git clone process which Alex & Chris will need to use?
# if they git clone do they need to set up connection in RStudio (or command line)?  if not then the current connection step can be moved away alongside making new repositories and branches
# need a brief paragraph on rollback - how to use old commit hash to bring back an older version if a new commit has severe issues
#Comments for Yuhan
#- need the graphic cleaned up so it makes sense to a regular reader like Alex - e.g. what does it mean CA will mainly work here?  next round could be you or I, need the description for the task not a person
# what is JIRA-35 example feature?  can you change this example to match something we might see in interlabs.  also use our naming convention which applies to branches as well (so the double dash and space are not acceptable)
# bottom comment - "feel free [...]" can you add the note about how the feature or develop branch gets merged?  It's a note to yourself (I think) so don't leave it for the reader)
#TBD
# explain bare min. information you need with commit message like you started with the annotation under the round dots.  Initial name is probably the least important info in the commit since git would track who pushed the change anyways?  not sure
# explain how each dot is a commit like a save point we can revert to by knowing the commit hash e.g. commit ba9da59
# I moved the home folder description up right beneath the diagram.  We need a description of the normal working "place" (the git clone local - you mentioned in the general set up for setting up a new repository but can you add description of how it would be like for our project base code?  especially with branches - does the user need to git clone each branch into a separate folder, or can they switch after git cloning the main?  this needs to be very clear assuming the reader is a new student , for example).  How often are we to sync/commit to github from local?  Then, back to the network folder home locations - how often are these to be "synced" with the github versions?  Decide on a frequency and that will become part of the QMS requirement for data management.
nodes = data.frame("name" =
c("Sample Notes (xlsx)", # Node 0
"Base Code config chunk reportType", # Node 1
"Base Code Chunk 2d (~line 400)", # Node 2
"Base Code df's = PT + both", # Node 3
"Base Code df's = Interlab + both", # Node 4
"skeleton.rmd pt report", #Node 5
"skeleton.rmd interlab report")) #Node 6
links = as.data.frame(matrix(c(
0, 2, 10, # Each row represents a link. The first number
1, 2, 10, # represents the node being conntected from.
2, 3, 10, # the second number represents the node connected to.
2, 4, 10,
3, 5, 10,
4, 6, 10),# The third number is the value of the node
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 12, nodeWidth = 30)
#| echo: fenced
print(head
(tibble::tibble(
Package = names(installed.packages()[,3]),
Version = unname(installed.packages()[,3])
), n=600 #where n = an appropriately large value to capture all your packages
)
)
#library(kableExtra)#for dataframe generated tables
library(networkD3) #for flowcharts
library(reticulate)#to run python in this file
### I. Code Documentation
#1.  Inventory existing external file dependencies and working procedures outside of main codebase, e.g. the python snippets, address books, flow of sample notes, raw, and clean data *(4 weeks / July 2023)*\
#Yuhan - please load into your excel table as df, then use kable package to format it
#*Deliverable: Inventory & flowchart of external relationships*
#2.  Inventory existing internal code dependencies and timelines (in-progress work shown in Figure 1)
# **Deliverable: Inventory & flowchart of intra-basecode relationships**
#| fig-cap: Intra code relationships
#| label: fig-workflow
nodes = data.frame("name" =
c("Emails",                                # 0
"Raw data",                              # 1
"QAQC check app (local/shinyapps)",      # 2
"Clean data xlsx set",                   # 3
"yyyymmdd_Sample_Notes.xlsm",            # 4
"config dt_methods.xlsx",                # 5
"WBE_SampleCode.rmd (github)",               # 6
"ggplot& gt .rds objects",               # 7
"svg, png plots, csv tables ",           # 8
"testReport_typst.qmd (github)",             # 9
"html report",                           # 10
"pdf report"))                           # 11
links = as.data.frame(matrix(c(
0, 1, 1, # Each row represents a link. The first number
1, 2, 1, # represents the node being conntected from.
2, 3, 1, # the second number represents the node connected to.
3, 6, 1, # The third number is the value of the node
4, 6, 0.5,
5, 6, 0.5,
6, 7 ,0.25,
6, 8, 0.33,
6, 9, 0.625,
7, 9, 0.625,
9, 10, 0.31,
9, 11, 0.31),
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 10)
#| echo: fenced
version
# not as necessary, but the IDE version can be checked using RStudio.Version()
#Yuhan's section
#### II. Training/Establishing Guidelines
#1.  Acquire training on and establish version control on Github *(2 weeks/July 2023)* *Deliverable: Training/Guidance document section, specifically method for & train team as soon as possible on version control/change management**\
### III. Preparatory Version Control & Unit Tests
#1.  Establish version control on Github. All team members to abide by training guidelines when introducing changes to main code base *(2 weeks/July 2023)*\
#    **Deliverable: Version control workflow graphic (to incl. in Training/Guidance document)**\
#Comments for Yuhan
# I would suggest that we don't need to give information on setting up new repository or branches in this doc (besides a general reference link) because we don't want people starting random repository/branches different from what you set up.
# instead can you walk through git clone process which Alex & Chris will need to use?
# if they git clone do they need to set up connection in RStudio (or command line)?  if not then the current connection step can be moved away alongside making new repositories and branches
# need a brief paragraph on rollback - how to use old commit hash to bring back an older version if a new commit has severe issues
#Comments for Yuhan
#- need the graphic cleaned up so it makes sense to a regular reader like Alex - e.g. what does it mean CA will mainly work here?  next round could be you or I, need the description for the task not a person
# what is JIRA-35 example feature?  can you change this example to match something we might see in interlabs.  also use our naming convention which applies to branches as well (so the double dash and space are not acceptable)
# bottom comment - "feel free [...]" can you add the note about how the feature or develop branch gets merged?  It's a note to yourself (I think) so don't leave it for the reader)
#TBD
# explain bare min. information you need with commit message like you started with the annotation under the round dots.  Initial name is probably the least important info in the commit since git would track who pushed the change anyways?  not sure
# explain how each dot is a commit like a save point we can revert to by knowing the commit hash e.g. commit ba9da59
# I moved the home folder description up right beneath the diagram.  We need a description of the normal working "place" (the git clone local - you mentioned in the general set up for setting up a new repository but can you add description of how it would be like for our project base code?  especially with branches - does the user need to git clone each branch into a separate folder, or can they switch after git cloning the main?  this needs to be very clear assuming the reader is a new student , for example).  How often are we to sync/commit to github from local?  Then, back to the network folder home locations - how often are these to be "synced" with the github versions?  Decide on a frequency and that will become part of the QMS requirement for data management.
nodes = data.frame("name" =
c("Sample Notes (xlsx)", # Node 0
"Base Code config chunk reportType", # Node 1
"Base Code Chunk 2d (~line 400)", # Node 2
"Base Code df's = PT + both", # Node 3
"Base Code df's = Interlab + both", # Node 4
"skeleton.rmd pt report", #Node 5
"skeleton.rmd interlab report")) #Node 6
links = as.data.frame(matrix(c(
0, 2, 10, # Each row represents a link. The first number
1, 2, 10, # represents the node being conntected from.
2, 3, 10, # the second number represents the node connected to.
2, 4, 10,
3, 5, 10,
4, 6, 10),# The third number is the value of the node
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 12, nodeWidth = 30)
#| echo: fenced
print(head
(tibble::tibble(
Package = names(installed.packages()[,3]),
Version = unname(installed.packages()[,3])
), n=600 #where n = an appropriately large value to capture all your packages
)
)
#library(kableExtra)#for dataframe generated tables
library(networkD3) #for flowcharts
library(reticulate)#to run python in this file
### I. Code Documentation
#1.  Inventory existing external file dependencies and working procedures outside of main codebase, e.g. the python snippets, address books, flow of sample notes, raw, and clean data *(4 weeks / July 2023)*\
#Yuhan - please load into your excel table as df, then use kable package to format it
#*Deliverable: Inventory & flowchart of external relationships*
#2.  Inventory existing internal code dependencies and timelines (in-progress work shown in Figure 1)
# **Deliverable: Inventory & flowchart of intra-basecode relationships**
#| fig-cap: Intra code relationships
#| label: fig-workflow
nodes = data.frame("name" =
c("Emails",                                # 0
"Raw data",                              # 1
"QAQC check app (local/shinyapps)",      # 2
"Clean data xlsx set",                   # 3
"yyyymmdd_Sample_Notes.xlsm",            # 4
"config dt_methods.xlsx",                # 5
"WBE_SampleCode.rmd (github)",               # 6
"ggplot& gt .rds objects",               # 7
"svg, png plots, csv tables ",           # 8
"testReport_typst.qmd (github)",             # 9
"html report",                           # 10
"pdf report"))                           # 11
links = as.data.frame(matrix(c(
0, 1, 1, # Each row represents a link. The first number
1, 2, 1, # represents the node being conntected from.
2, 3, 1, # the second number represents the node connected to.
3, 6, 1, # The third number is the value of the node
4, 6, 0.5,
5, 6, 0.5,
6, 7 ,0.25,
6, 8, 0.33,
6, 9, 0.625,
7, 9, 0.625,
9, 10, 0.31,
9, 11, 0.31),
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 10)
#| echo: fenced
version
# not as necessary, but the IDE version can be checked using RStudio.Version()
#Yuhan's section
#### II. Training/Establishing Guidelines
#1.  Acquire training on and establish version control on Github *(2 weeks/July 2023)* *Deliverable: Training/Guidance document section, specifically method for & train team as soon as possible on version control/change management**\
### III. Preparatory Version Control & Unit Tests
#1.  Establish version control on Github. All team members to abide by training guidelines when introducing changes to main code base *(2 weeks/July 2023)*\
#    **Deliverable: Version control workflow graphic (to incl. in Training/Guidance document)**\
#Comments for Yuhan
# I would suggest that we don't need to give information on setting up new repository or branches in this doc (besides a general reference link) because we don't want people starting random repository/branches different from what you set up.
# instead can you walk through git clone process which Alex & Chris will need to use?
# if they git clone do they need to set up connection in RStudio (or command line)?  if not then the current connection step can be moved away alongside making new repositories and branches
# need a brief paragraph on rollback - how to use old commit hash to bring back an older version if a new commit has severe issues
#Comments for Yuhan
#- need the graphic cleaned up so it makes sense to a regular reader like Alex - e.g. what does it mean CA will mainly work here?  next round could be you or I, need the description for the task not a person
# what is JIRA-35 example feature?  can you change this example to match something we might see in interlabs.  also use our naming convention which applies to branches as well (so the double dash and space are not acceptable)
# bottom comment - "feel free [...]" can you add the note about how the feature or develop branch gets merged?  It's a note to yourself (I think) so don't leave it for the reader)
#TBD
# explain bare min. information you need with commit message like you started with the annotation under the round dots.  Initial name is probably the least important info in the commit since git would track who pushed the change anyways?  not sure
# explain how each dot is a commit like a save point we can revert to by knowing the commit hash e.g. commit ba9da59
# I moved the home folder description up right beneath the diagram.  We need a description of the normal working "place" (the git clone local - you mentioned in the general set up for setting up a new repository but can you add description of how it would be like for our project base code?  especially with branches - does the user need to git clone each branch into a separate folder, or can they switch after git cloning the main?  this needs to be very clear assuming the reader is a new student , for example).  How often are we to sync/commit to github from local?  Then, back to the network folder home locations - how often are these to be "synced" with the github versions?  Decide on a frequency and that will become part of the QMS requirement for data management.
nodes = data.frame("name" =
c("Sample Notes (xlsx)", # Node 0
"Base Code config chunk reportType", # Node 1
"Base Code Chunk 2d (~line 400)", # Node 2
"Base Code df's = PT + both", # Node 3
"Base Code df's = Interlab + both", # Node 4
"skeleton.rmd pt report", #Node 5
"skeleton.rmd interlab report")) #Node 6
links = as.data.frame(matrix(c(
0, 2, 10, # Each row represents a link. The first number
1, 2, 10, # represents the node being conntected from.
2, 3, 10, # the second number represents the node connected to.
2, 4, 10,
3, 5, 10,
4, 6, 10),# The third number is the value of the node
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 12, nodeWidth = 30)
#| echo: fenced
print(head
(tibble::tibble(
Package = names(installed.packages()[,3]),
Version = unname(installed.packages()[,3])
), n=600 #where n = an appropriately large value to capture all your packages
)
)
